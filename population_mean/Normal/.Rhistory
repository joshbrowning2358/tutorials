orders = orders[orders$RestingSide!="null",]
write.csv( file="C:/Users/jbrowning/Desktop/To Home/Personal/Mines Files/MATH 598- Statistics Practicum/Data/orders.csv", orders )
rm(raw); gc()
price$PriceDiff1SecAhead = (price$MicroPrice1SecAhead - price$MicroPrice)*100
#price$PriceRatio1SecAhead = price$MicroPrice1SecAhead / price$MicroPrice - 1
#price$PriceDiff60SecAhead = price$MicroPrice60SecAhead - price$MicroPrice
#price$PriceRatio60SecAhead = price$MicroPrice60SecAhead / price$MicroPrice - 1
set.seed(123)
price$cvGroup = sample(c(rep(1:5,each=148125),rep(6:10,each=148124)))
price$Model.No = as.numeric( price$Time %% (24*60*60) > 6.75*60*60 & price$Time %% (24*60*60) < 13.5*60*60 )
nrow(d)-1481245
nrow(price)-1481245
price$cvGroup = sample(c(rep(1:5,each=148125),rep(6:10,each=148124)),rep(-1,1237233))
price$cvGroup = c(sample(c(rep(1:5,each=148125),rep(6:10,each=148124))),rep(-1,1237233))
colnames(price)
price$BidHigh1Cnt = price$BidQuantity1
price$BidHigh2Cnt = apply(price[,1:5*3-1]*(abs(price[,1:5*3+1]-price$BidPrice1+.01)<.005),1,sum, na.rm=T)
price$BidHigh3Cnt = apply(price[,1:5*3-1]*(abs(price[,1:5*3+1]-price$BidPrice1+.02)<.005),1,sum, na.rm=T)
price$BidHigh4Cnt = apply(price[,1:5*3-1]*(abs(price[,1:5*3+1]-price$BidPrice1+.03)<.005),1,sum, na.rm=T)
price$BidHigh5Cnt = apply(price[,1:5*3-1]*(abs(price[,1:5*3+1]-price$BidPrice1+.04)<.005),1,sum, na.rm=T)
price$OfferLow1Cnt = price$OfferQuantity1
price$OfferLow2Cnt = apply(price[,6:10*3-1]*(abs(price[,6:10*3+1]-price$OfferPrice1-.01)<.005),1,sum, na.rm=T)
price$OfferLow3Cnt = apply(price[,6:10*3-1]*(abs(price[,6:10*3+1]-price$OfferPrice1-.02)<.005),1,sum, na.rm=T)
price$OfferLow4Cnt = apply(price[,6:10*3-1]*(abs(price[,6:10*3+1]-price$OfferPrice1-.03)<.005),1,sum, na.rm=T)
price$OfferLow5Cnt = apply(price[,6:10*3-1]*(abs(price[,6:10*3+1]-price$OfferPrice1-.04)<.005),1,sum, na.rm=T)
form = paste("PriceDiff1SecAhead ~", paste0("BidHigh",1:5,"Cnt", collapse=" + "),"+",paste0("OfferLow",1:5,"Cnt", collapse=" + "))
#cvGroup = sample(1:10, size=nrow(price), replace=T)
#fit = cvModel( d=price, cvGroup, indCol=35, model=paste("glm(", form, ")" ) )
#coeffs = data.frame( do.call("rbind", fit$models) )
#coeffs = melt(coeffs, measure.vars=1:ncol(coeffs) )
#ggplot( coeffs, aes(x=variable, y=value) ) + geom_point() +
#  geom_boxplot()
#Coefficients are very consistent across CV groups (except for intercept).  Thus, it should be safe to use the model without worrying about it skewing cross-validation results.
fit = glm( as.formula(form), data=price[price$Time<=2*24*60*60,])
price$MicroPriceAdj = predict(fit, newdata=price)
price$LogBookImb = log( (price$BidQuantity1 + price$BidQuantity2 + price$BidQuantity3 + price$BidQuantity4 + price$BidQuantity5)
/ (price$OfferQuantity1 + price$OfferQuantity2 + price$OfferQuantity3 + price$OfferQuantity4 + price$OfferQuantity5) )
price[1:10,]
price[1:10,c("MicroPrice","BidQuantity1","OfferQuantity1")]
price[1:10,c("MicroPrice","BidQuantity1","OfferQuantity1","BidPrice1")]
price[1:10,c("MicroPrice","BidQuantity1","OfferQuantity1","BidPrice1","OfferQuantity1")]
price[1:10,c("MicroPrice","BidQuantity1","OfferQuantity1","BidPrice1","OfferPrice1")]
(94.7*2+94.71*4)/6
price$LogBookImb = log( (price$BidQuantity1 + price$BidQuantity2 + price$BidQuantity3 + price$BidQuantity4 + price$BidQuantity5)
/ (price$OfferQuantity1 + price$OfferQuantity2 + price$OfferQuantity3 + price$OfferQuantity4 + price$OfferQuantity5) )
summary( price$LogBookImb )
colnames(price)
ggplot(price[sample(1:nrow(price),size=100000),], aes(x=LogBookImb, y=PriceDiff1SecAhead) ) +
geom_point(alpha=.1) + geom_smooth()
ggplot(price[sample(1:nrow(price),size=100000),], aes(x=LogBookImb, y=PriceDiff1SecAhead) ) +
geom_point(alpha=.1) + geom_smooth()
ggplot(price[sample(1:nrow(price),size=100000),], aes(x=LogBookImb, y=PriceDiff1SecAhead) ) +
geom_point(alpha=.1) + geom_smooth()
ggplot(price[sample(1:nrow(price),size=100000),], aes(x=LogBookImb, y=PriceDiff1SecAhead) ) +
geom_point(alpha=.1) + geom_smooth() + scale_y_log10()
ggplot(price[sample(1:nrow(price),size=100000),], aes(x=LogBookImb, y=PriceDiff1SecAhead) ) +
geom_point(alpha=.1) + geom_smooth()
price$LogBookImbInside = log( price$BidQuantity1 / price$OfferQuantity1 )
ggplot(price[sample(1:nrow(price),size=100000),], aes(x=LogBookImbInside, y=PriceDiff1SecAhead) ) +
geom_point(alpha=.1) + geom_smooth()
ggplot(price[sample(1:nrow(price),size=100000),], aes(x=LogBookImbInside, y=PriceDiff1SecAhead) ) +
geom_point(alpha=.1) + geom_smooth()
2^(0:4)
2^(0:-4)
price$BidQuantityAdj = c(price$BidHigh1Cnt, price$BidHigh2Cnt, price$BidHigh3Cnt, price$BidHigh4Cnt, price$BidHigh5Cnt) %*% 2^(0:-4)
price$BidQuantityAdj = cbind(price$BidHigh1Cnt, price$BidHigh2Cnt, price$BidHigh3Cnt, price$BidHigh4Cnt, price$BidHigh5Cnt) %*% 2^(0:-4)
price$BidQuantityAdj
price$OfferQuantityAdj = cbind(price$OfferLow1Cnt, price$OfferLow2Cnt, price$OfferLow3Cnt, price$OfferLow4Cnt, price$OfferLow5Cnt) %*% 2^(0:-4)
price$OfferQuantityAdj
price$BidQuantityAdj
is( price )
dim( price )
dim( price$BidQuantityAdj )
dim( price[,51] )
is( price[,51] )
is( price[,40] )
price$BidQuantityAdj = as.numeric( cbind(price$BidHigh1Cnt, price$BidHigh2Cnt, price$BidHigh3Cnt, price$BidHigh4Cnt, price$BidHigh5Cnt) %*% 2^(0:-4) )
price$OfferQuantityAdj = as.numeric( cbind(price$OfferLow1Cnt, price$OfferLow2Cnt, price$OfferLow3Cnt, price$OfferLow4Cnt, price$OfferLow5Cnt) %*% 2^(0:-4) )
price$BidQuantityAdj
price$MicroPriceAdjExp = (price$BidPrice1*(price$OfferQuantityAdj)+price$OfferPrice1*(price$BidQuantityAdj) ) /
(price$OfferQuantityAdj + price$BidQuantityAdj)
ggplot(price[sample(1:nrow(price),size=100000),], aes(x=MicroPriceAdjExp, y=PriceDiff1SecAhead) ) +
geom_point(alpha=.1) + geom_smooth()
ggplot(price[sample(1:nrow(price),size=100000),], aes(x=MicroPriceAdjExp, y=MicroPrice) ) +
geom_point(alpha=.1) + geom_smooth()
cor( price$MicroPriceAdjExp, price$MicroPrice )
cor( price$MicroPriceAdjExp, price$MicroPrice, use="pairwise.complete.obs" )
cor( price$MicroPriceAdj, price$MicroPrice, use="pairwise.complete.obs" )
cor( price$MicroPriceAdj, price$MicroPriceAdjExp, use="pairwise.complete.obs" )
summary( price$MicroPriceAdj - price$MicroPrice )
cor( price$MicroPriceAdj, price$MicroPriceAdjExp, use="pairwise.complete.obs" )
options(digits=20)
cor( price$MicroPriceAdj, price$MicroPriceAdjExp, use="pairwise.complete.obs" )
options(digits=200)
options(digits=22)
cor( price$MicroPriceAdj, price$MicroPriceAdjExp, use="pairwise.complete.obs" )
cor( price$MicroPriceAdj, price$MicroPriceAdjExp, use="pairwise.complete.obs" )-1
summary( price$MicroPriceAdj / price$MicroPrice )
price$LogBookImb = log( (price$BidQuantity1 + price$BidQuantity2 + price$BidQuantity3 + price$BidQuantity4 + price$BidQuantity5)
/ (price$OfferQuantity1 + price$OfferQuantity2 + price$OfferQuantity3 + price$OfferQuantity4 + price$OfferQuantity5) )
price$LogBookImbInside = log( price$BidQuantity1 / price$OfferQuantity1 )
price$BidQuantityAdj = as.numeric( cbind(price$BidHigh1Cnt, price$BidHigh2Cnt, price$BidHigh3Cnt, price$BidHigh4Cnt, price$BidHigh5Cnt) %*% 2^(0:-4) )
price$OfferQuantityAdj = as.numeric( cbind(price$OfferLow1Cnt, price$OfferLow2Cnt, price$OfferLow3Cnt, price$OfferLow4Cnt, price$OfferLow5Cnt) %*% 2^(0:-4) )
price$MicroPriceAdjExp = (price$BidPrice1*(price$OfferQuantityAdj)+price$OfferPrice1*(price$BidQuantityAdj) ) /
(price$OfferQuantityAdj + price$BidQuantityAdj)
#Remove unneccesary columns:
rmCols = c(paste0("BidQuantity",1:5), paste0("BidNumberOfOrders",1:5), paste0("BidPrice",1:5)
,paste0("OfferQuantity",1:5), paste0("OfferNumberOfOrders",1:5), paste0("OfferPrice",1:5)
,paste0("BidHigh",1:5,"Cnt"), paste0("OfferLow",1:5,"Cnt"), "BidQuantityAdj", "OfferQuantityAdj")
for(i in rmCols) price[,i] = NULL
write.csv(price,"price_base_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdj")], lags=1:60*.01)
write.csv(lag,"price_lag_hund_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdj")], lags=7:60*.1)
write.csv(lag,"price_lag_tenth_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdj")], lags=7:60)
write.csv(lag,"price_lag_seconds_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdj")], lags=2:60*60)
write.csv(lag,"price_lag_minutes_cols.csv",row.names=F)
colnames(price)
price$MicroPriceAdj = predict(fit, newdata=price)
raw = read.csv(file="/home/josh/Documents/Professional Files/Mines/MATH 598- Statistics Practicum/Data/20131104.CLZ3.log")
raw = rbind(raw, read.csv(file="/home/josh/Documents/Professional Files/Mines/MATH 598- Statistics Practicum/Data/20131105.CLZ3.log") )
raw = rbind(raw, read.csv(file="/home/josh/Documents/Professional Files/Mines/MATH 598- Statistics Practicum/Data/20131107.CLZ3.log") )
raw = rbind(raw, read.csv(file="/home/josh/Documents/Professional Files/Mines/MATH 598- Statistics Practicum/Data/20131108.CLZ3.log") )
raw$Time = as.POSIXct(strptime(x=raw$Time, format="%Y%m%d %H:%M:%OS"))
#Convert time to a numeric vector (i.e. seconds after 2013-11-04 00:00:00):
raw$Time = as.numeric( raw$Time - as.POSIXct("2013-11-04") )
price = raw[raw$RestingSide=="",]
price = price[,c(1:31,35:37)]
rm(raw); gc()
price$PriceDiff1SecAhead = (price$MicroPrice1SecAhead - price$MicroPrice)*100
set.seed(123)
price$cvGroup = c(sample(c(rep(1:5,each=148125),rep(6:10,each=148124))),rep(-1,1237233))
price$Model.No = as.numeric( price$Time %% (24*60*60) > 6.75*60*60 & price$Time %% (24*60*60) < 13.5*60*60 )
price$BidHigh1Cnt = price$BidQuantity1
price$BidHigh2Cnt = apply(price[,1:5*3-1]*(abs(price[,1:5*3+1]-price$BidPrice1+.01)<.005),1,sum, na.rm=T)
price$BidHigh3Cnt = apply(price[,1:5*3-1]*(abs(price[,1:5*3+1]-price$BidPrice1+.02)<.005),1,sum, na.rm=T)
price$BidHigh4Cnt = apply(price[,1:5*3-1]*(abs(price[,1:5*3+1]-price$BidPrice1+.03)<.005),1,sum, na.rm=T)
price$BidHigh5Cnt = apply(price[,1:5*3-1]*(abs(price[,1:5*3+1]-price$BidPrice1+.04)<.005),1,sum, na.rm=T)
price$OfferLow1Cnt = price$OfferQuantity1
price$OfferLow2Cnt = apply(price[,6:10*3-1]*(abs(price[,6:10*3+1]-price$OfferPrice1-.01)<.005),1,sum, na.rm=T)
price$OfferLow3Cnt = apply(price[,6:10*3-1]*(abs(price[,6:10*3+1]-price$OfferPrice1-.02)<.005),1,sum, na.rm=T)
price$OfferLow4Cnt = apply(price[,6:10*3-1]*(abs(price[,6:10*3+1]-price$OfferPrice1-.03)<.005),1,sum, na.rm=T)
price$OfferLow5Cnt = apply(price[,6:10*3-1]*(abs(price[,6:10*3+1]-price$OfferPrice1-.04)<.005),1,sum, na.rm=T)
form = paste("PriceDiff1SecAhead ~", paste0("BidHigh",1:5,"Cnt", collapse=" + "),"+",paste0("OfferLow",1:5,"Cnt", collapse=" + "))
fit = glm( as.formula(form), data=price[price$Time<=2*24*60*60,])
price$MicroPriceAdj = predict(fit, newdata=price)
price$MicroPriceAdj = price$MicroPriceAdj + price$MicroPrice
price$LogBookImb = log( (price$BidQuantity1 + price$BidQuantity2 + price$BidQuantity3 + price$BidQuantity4 + price$BidQuantity5)
/ (price$OfferQuantity1 + price$OfferQuantity2 + price$OfferQuantity3 + price$OfferQuantity4 + price$OfferQuantity5) )
price$LogBookImbInside = log( price$BidQuantity1 / price$OfferQuantity1 )
price$BidQuantityAdj = as.numeric( cbind(price$BidHigh1Cnt, price$BidHigh2Cnt, price$BidHigh3Cnt, price$BidHigh4Cnt, price$BidHigh5Cnt) %*% 2^(0:-4) )
price$OfferQuantityAdj = as.numeric( cbind(price$OfferLow1Cnt, price$OfferLow2Cnt, price$OfferLow3Cnt, price$OfferLow4Cnt, price$OfferLow5Cnt) %*% 2^(0:-4) )
price$MicroPriceAdjExp = (price$BidPrice1*(price$OfferQuantityAdj)+price$OfferPrice1*(price$BidQuantityAdj) ) /
(price$OfferQuantityAdj + price$BidQuantityAdj)
rmCols = c(paste0("BidQuantity",1:5), paste0("BidNumberOfOrders",1:5), paste0("BidPrice",1:5)
,paste0("OfferQuantity",1:5), paste0("OfferNumberOfOrders",1:5), paste0("OfferPrice",1:5)
,paste0("BidHigh",1:5,"Cnt"), paste0("OfferLow",1:5,"Cnt"), "BidQuantityAdj", "OfferQuantityAdj")
for(i in rmCols) price[,i] = NULL
write.csv(price,"price_base_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdj")], lags=1:60*.01)
write.csv(lag,"price_lag_hund_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdj")], lags=7:60*.1)
write.csv(lag,"price_lag_tenth_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdj")], lags=7:60)
write.csv(lag,"price_lag_seconds_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdj")], lags=2:60*60)
write.csv(lag,"price_lag_minutes_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdjExp")], lags=1:60*.01)
write.csv(lag,"price_exp_lag_hund_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdjExp")], lags=7:60*.1)
write.csv(lag,"price_exp_lag_tenth_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdjExp")], lags=7:60)
write.csv(lag,"price_exp_lag_seconds_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdjExp")], lags=2:60*60)
write.csv(lag,"price_exp_lag_minutes_cols.csv",row.names=F)
########### LogBookImb
lag = load_lag_price(price[,c("Time","LogBookImb")], lags=1:60*.01)
write.csv(lag,"price_exp_lag_hund_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","LogBookImb")], lags=7:60*.1)
write.csv(lag,"price_exp_lag_tenth_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","LogBookImb")], lags=7:60)
write.csv(lag,"price_exp_lag_seconds_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","LogBookImb")], lags=2:60*60)
write.csv(lag,"price_exp_lag_minutes_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","MicroPriceAdjExp")], lags=2:60*60)
write.csv(lag,"price_exp_lag_minutes_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","LogBookImbInside")], lags=1:60*.01)
write.csv(lag,"log_book_imb_inside_lag_hund_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","LogBookImbInside")], lags=7:60*.1)
write.csv(lag,"log_book_imb_inside_lag_tenth_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","LogBookImbInside")], lags=7:60)
write.csv(lag,"log_book_imb_inside_lag_seconds_cols.csv",row.names=F)
lag = load_lag_price(price[,c("Time","LogBookImbInside")], lags=2:60*60)
write.csv(lag,"log_book_imb_inside_minutes_cols.csv",row.names=F)
library(car)
library(ggplot2)
library(plyr)
library(reshape)
library(RColorBrewer)
library(bigmemory)
library(gridExtra)
library(scales)
?gsub
library(Rcpp)
detach("Rcpp")
detach("package:Rcpp", unload=TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
library(inline)
cppfunction('double mytest(double x) {
return x;
}', depends="RcppArmadillo")
?cppfunction
??cppfunction
update
update("Rcpp")
?update
library(Rcpp)
sessionInfo()
detach("package:inline", unload=TRUE)
cppfunction
?cppfunction
library(Rcpp)
sessionInfo()
cppfunction
install.packages("inline")
sessionInfo()
library(inline)
sessionInfo()
cppfunction
cppfunction
library(Rcpp)
library(inline)
cppfunction
library(RcppArmadillo)
cppfunction
sessionInfo()
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
library(Rcpp)
library(inline)
library(RcppArmadillo)
sessionInfo()
cppfunction
cppFunction
cppFunction('double mytest(double x) {
return x;
}', depends="RcppArmadillo")
cppFunction('double mytest(double x) {
x = x + 1;
return x;
}', depends="RcppArmadillo")
library(knitr)
sessionInfo()
install.packages("knitr")
install.packages("knitr")
load("/media/storage/Personal Files/Kaggle/Higgs Boson/Data/d2.RData")
d2$response <- ifelse(d2$Label == "s", 1, 0)
colnames(d2)
length(6:45)-10
scale_pos_wts <- with(d2, sum(Weight[response == 0]/
sum(Weight[response == 1])))
scale_pos_wts
table( d2$response )
scale_pos_wts <- with(d2, sum(Weight[response == 0]/
sum(Weight[response == 1])))
scale_pos_wts
scale_pos_wts <- with(d2[d2$cvGroup!=-1,], sum(Weight[response == 0]/
sum(Weight[response == 1])))
scale_pos_wts
sum( d2$Weight[d2$response==0] )
sum( d2$Weight[d2$response==0], na.rm=T )
sum( d2$Weight[d2$response==1], na.rm=T )
692/411000
411000/692
library(sn)
qst(.25,0,1,7,97.72705)
?qst
qst(.25,0,1,7,97.72705, tol=1e-6)
qst(.25,0,1,7,97.72705, tol=1e-4)
qst(.25,0,1,7,97.72705, tol=1e-5)
qst(.25,0,1,7,97.72705, tol=1e-4)
?qt
library(CompRandFld)
library(CompRandFld)
?RFsim
RFsim( coordx = seq(0,1,.1), coordy=seq(0,1,.1), corrmodel="sph_sph" )
RFsim( coordx = seq(0,1,.1), coordy=seq(0,1,.1), corrmodel="exp_exp" )
?exp_exp
CorrelationParam("exp_exp")
RFsim( coordx = seq(0,1,.1), coordy=seq(0,1,.1), corrmodel="spherical_spherical"
)
RFsim( coordx = seq(0,1,.1), coordy=seq(0,1,.1), coordt=0:10, corrmodel="spherical_spherical"
,param=list(scale_s=.5, scale_t=.5))
RFsim( coordx = seq(0,1,.1), coordy=seq(0,1,.1), coordt=0:10, corrmodel="exp_exp"
,param=list(scale_s=.5, scale_t=.5))
CorrelationParam("exp_exp")
RFsim( coordx = seq(0,1,.1), coordy=seq(0,1,.1), coordt=0:10, corrmodel="exp_exp"
,param=list(scale_s=.5, scale_t=.5))
CorrelationParam("exp_exp")
?CorrelationParam
CorrelationParam("spherical")
CorrelationParam("exp")
CorrelationParam("exponential")
RFsim( coordx = seq(0,1,.1), coordy=seq(0,1,.1), coordt=0:10, corrmodel="exp_exp"
,param=list(scale_s=.5, scale_t=.5, sill=1))
RFsim( coordx = seq(0,1,.1), coordy=seq(0,1,.1), coordt=0:10, corrmodel="exp_exp"
,param=list(scale_s=.5, scale_t=.5, nugget=0, sill=1))
RFsim( coordx = seq(0,1,.1), coordy=seq(0,1,.1), coordt=0:10, corrmodel="exp_exp"
,param=list(scale_s=.5, scale_t=.5, nugget=0, mean=0, sill=1))
d = RFsim( coordx = seq(0,1,.1), coordy=seq(0,1,.1), coordt=0:10, corrmodel="exp_exp"
,param=list(scale_s=.5, scale_t=.5, nugget=0, mean=0, sill=1))
names(d)
d$data
d$spacetime
d = RFsim( coordx = seq(0,1,.1), coordy=seq(0,1,.1), coordt=0:10, corrmodel="exp_exp"
,param=list(scale_s=.5, scale_t=2, nugget=0, mean=0, sill=1))
d
d = RFsim( coordx = seq(0,1,.1), coordy=seq(0,5,.1), coordt=0:10, corrmodel="exp_exp"
,param=list(scale_s=.5, scale_t=2, nugget=0, mean=0, sill=1))
d
merge(x=seq(0,1,.1), y=seq(0,1,.1))
d = RFsim( coordx = merge(x=seq(0,1,.1), y=seq(0,1,.1)), coordt=0:10, corrmodel="exp_exp"
,param=list(scale_s=.5, scale_t=2, nugget=0, mean=0, sill=1))
is( merge(x=seq(0,1,.1), y=seq(0,1,.1)) )
d = RFsim( coordx = matrix(merge(x=seq(0,1,.1), y=seq(0,1,.1)))
,coordt=0:10, corrmodel="exp_exp"
,param=list(scale_s=.5, scale_t=2, nugget=0, mean=0, sill=1))
matrix(merge(x=seq(0,1,.1), y=seq(0,1,.1)))
as.matrix(merge(x=seq(0,1,.1), y=seq(0,1,.1)))
d = RFsim( coordx = as.matrix(merge(x=seq(0,1,.1), y=seq(0,1,.1)))
,coordt=0:10, corrmodel="exp_exp"
,param=list(scale_s=.5, scale_t=2, nugget=0, mean=0, sill=1))
d
dim( d$data )
library(devtools)
install_github(repo = "sws_flag", username = "mkao006",
subdir = "faoswsFlag")
install.packages("/media/storage/Professional Files/FAO/faosws_0.3.2.zip", type="src", repo=NULL)
install.packages("/media/storage/Professional Files/FAO/faosws_0.3.2.zip", type="src", repos=NULL)
install.packages("/media/storage/Professional Files/FAO/faosws", type="src", repos=NULL)
install_github(repo = "sws_imputation",
username = "mkao006",
subdir = "faoswsProductionImputation")
library(devtools)
library(faoswsFlag)
install_github(repo = "sws_flag", username = "mkao006",
subdir = "faoswsFlag")
install_github(repo = "sws_flag", username = "mkao006",
subdir = "faoswsFlag")
install.packages("entropy")
install_github(repo = "sws_flag", username = "mkao006",
subdir = "faoswsFlag")
install_github(repo = "sws_flag", username = "mkao006",
subdir = "faoswsFlag")
install_github(repo = "sws_flag", username = "mkao006",
subdir = "faoswsFlag")
install_github(repo = "sws_flag", username = "mkao006",
subdir = "faoswsFlag")
install_github(repo = "sws_flag", username = "mkao006",
subdir = "faoswsFlag")
install_github(repo = "sws_flag", username = "mkao006",
subdir = "faoswsFlag")
install.packages("/media/storage/Professional Files/FAO/faosws", type="src", repos=NULL)
library(faoswsFlag)
library(faosws)
install_github(repo = "sws_imputation",
username = "mkao006",
subdir = "faoswsProductionImputation")
install_github(repo = "mkao006/sws_util",
subdir = "faoswsUtil")
library(faoswsUtil)
install_github(repo = "mkao006/sws_imputation",
subdir = "faoswsProductionImputation")
install_github(repo = "mkao006/sws_imputation",
subdir = "faoswsProductionImputation")
swsOldFlagTable = rbind(faoswsFlagTable,
data.frame(flagObservationStatus = c("*", "F"),
flagObservationWeights = c(0.9, 0.6)))
swsOldFlagTable[swsOldFlagTable$flagObservationStatus == "E",
"flagObservationWeights"] = 0.55
swsOldFlagTable
library(lattice)
library(faoswsUtil)
library(data.table)
library(lattice)
str(okrapd)
faoswsFlagTable
library(faoswsFlag)
?install_github
install_github(repo = "mkao006/sws_imputation",
subdir = "faoswsProductionImputation",
build_vignettes = FALSE)
library(faoswsProductionImputation)
install_github(repo = "mkao006/sws_imputation",
subdir = "faoswsProductionImputation")
library(modiscloud)
install.packages("/media/josh/JOSH/modiscloud_0.14.tar.gz", type="src", repos=NULL)
library(raster)
library(sp_
library(sp)
library(rgdal)
library(sfsmisc)
library(date)
install.packages("/media/josh/JOSH/date_1.2-34.tar.gz", type="src", repos=NULL)
install.packages("/media/josh/JOSH/modiscloud_0.14.tar.gz", type="src", repos=NULL)
install.packages("/media/josh/JOSH/modiscloud_0.14.tar.gz", type="src", repos=NULL)
install.packages("/media/josh/JOSH/modiscloud_0.14.tar.gz", type="src", repos=NULL)
# maskr (run from ~/Repos/maskr):
# python -m amp_maskr.bin.test_pixelwise \
#     --export_dir ~/Logs/maskr/all/gce_2018-03-28/export/latest/1522326278/ \
#     --dataset /home/josh/Data/test \
#     --output /home/josh/Logs/model_comparison/maskr.csv
library(ggplot2)
library(data.table)
alexnet = fread('~/Logs/model_comparison/alexnet.csv')
alexnet = fread('~/Data/alexnet.csv')
alexnet = fread('/media/storage/Data/alexnet.csv')
maskr = fread('/media/storage/Data/maskr.csv')
alexnet
maskr
d = merge(alexnet, maskr, by=c('facility', 'frame_id', 'class_id'), suffixes=c('_alexnet', '_maskr'), all=TRUE)
d = d[class_id != 'conveyor_belt', ]
to_plot = melt(d, id.vars=c('facility', 'frame_id', 'class_id'), variable.name='model', value.name='iou')
to_plot[, model := sub('iou_', '', model)]
to_plot[is.na(iou), iou := 0]
to_plot = melt(d, id.vars=c('facility', 'frame_id', 'class_id'), variable.name='model', value.name='iou')
to_plot[, model := sub('iou_', '', model)]
ggplot(to_plot, aes(x=iou, fill=model)) +
geom_histogram(alpha=0.7, binwidth=0.05, position='identity') +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5)),
ggplot(to_plot, aes(x=iou, fill=model)) +
geom_histogram(alpha=0.7, binwidth=0.05, position='identity') +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5))
to_plot[is.na(iou), ]
to_plot[frame_id == 1105566, ]
ggplot(to_plot, aes(x=iou, fill=model)) +
geom_histogram(alpha=0.7, binwidth=0.05, position='identity') +
facet_wrap( ~ class_id, scales='free') +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5))
to_plot[class_id == 'carton', mean(iou, na.rm=TRUE), by='model']
to_plot[class_id == 'miscellaneous', mean(iou, na.rm=TRUE), by='model']
to_plot[class_id == 'thin_film', mean(iou, na.rm=TRUE), by='model']
ggplot(to_plot, aes(x=iou, fill=model)) +
geom_histogram(alpha=0.7, binwidth=0.05, position='identity') +
facet_wrap( ~ facility, scales='free') +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5))
ggplot(to_plot[facility=='demcon.msw' & class_id == 'natural_hdpe', ], aes(x=iou, fill=model)) +
geom_histogram(alpha=0.7, binwidth=0.05, position='identity') +
facet_wrap( ~ facility, scales='free') +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5))
getwd()
source('/media/storage/Data/compare_results.R')
ggplot(to_plot, aes(x=iou, fill=model)) +
geom_histogram(alpha=0.7, binwidth=0.05, position='identity') +
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5))
# maskr (run from ~/Repos/maskr):
# python -m amp_maskr.bin.test_pixelwise \
#     --export_dir ~/Logs/maskr/all/gce_2018-03-28/export/latest/1522326278/ \
#     --dataset /home/josh/Data/test \
#     --output /home/josh/Logs/model_comparison/maskr.csv
library(ggplot2)
library(data.table)
alexnet = fread('/media/storage/Data/alexnet.csv')
alexnet
maskr = fread('/media/storage/Data/maskr.csv')
source('/media/storage/Data/compare_results.R')
shiny::runApp('/media/storage/Repos/tutorials/population_mean')
install.packages('plotly')
install.packages("plotly")
shiny::runApp('/media/storage/Repos/tutorials/population_mean')
setwd("/media/storage/Repos/tutorials/population_mean/")
library(rsconnect)
setwd("/media/storage/Repos/tutorials/population_mean/")
install.packages('rsconnect')
# files = dir("../Helper Functions/", pattern = "*.R", full.names = TRUE)
# sapply(files, function(x) file.copy(from = x, to = "R/"))
deployApp(appName = "mean_distribution_normal", account = "josh-browning-consulting")
library(rsconnect)
# files = dir("../Helper Functions/", pattern = "*.R", full.names = TRUE)
# sapply(files, function(x) file.copy(from = x, to = "R/"))
deployApp(appName = "mean_distribution_normal", account = "josh-browning-consulting")
rsconnect::setAccountInfo(name='josh-browning-fao', token='8BB9073601D332A675DA3F8712F43018',
secret='Q/k4ueDqzEW/uTzPNMLyTvNaKA5Kyigdx4aggyQV')
setAccountInfo(name='josh-browning-consulting', token='984C1714585F1DCF2711FEF99F75E1A0', secret='Q/k4ueDqzEW/uTzPNMLyTvNaKA5Kyigdx4aggyQV')
library(rsconnect)
setwd("/media/storage/Repos/tutorials/population_mean/")
# files = dir("../Helper Functions/", pattern = "*.R", full.names = TRUE)
# sapply(files, function(x) file.copy(from = x, to = "R/"))
deployApp(appName = "mean_distribution_normal", account = "josh-browning-consulting")
setwd("/media/storage/Repos/tutorials/derivatives/")
runApp('/media/storage/Repos/tutorials/population_mean/Normal')
?sliderInput
source('/media/storage/Repos/tutorials/population_mean/Normal/deployAppCode.R')
runApp('/media/storage/Repos/tutorials/population_mean/Other Distributions')
library(shinydashboard)
install.packages('shinydashboard')
library(shinydashboard)
runApp('/media/storage/Repos/tutorials/population_mean/Other Distributions')
runApp('/media/storage/Repos/tutorials/population_mean/Other Distributions')
runApp('/media/storage/Repos/tutorials/population_mean/Other Distributions')
runApp('/media/storage/Repos/tutorials/population_mean/Other Distributions')
runApp('/media/storage/Repos/tutorials/population_mean/Other Distributions')
runApp('/media/storage/Repos/tutorials/population_mean/Other Distributions')
runApp('/media/storage/Repos/tutorials/population_mean/Other Distributions')
runApp('/media/storage/Repos/tutorials/population_mean/Other Distributions')
runApp('/media/storage/Repos/tutorials/population_mean/Other Distributions')
runApp('/media/storage/Repos/tutorials/population_mean/Other Distributions')
runApp('/media/storage/Repos/tutorials/population_mean/Other Distributions')
